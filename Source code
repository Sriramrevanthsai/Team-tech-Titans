#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_COURSES 100
#define FILENAME "course_list.txt"

typedef struct {
    int id;
    char description[100];
} Course;

Course courses[MAX_COURSES];
int course_count = 0;

void createCourse();
void readCourses();
void updateCourse();
void deleteCourse();
void bubbleSort();
void selectionSort();
int linearSearch(int id);
int binarySearch(int id);
void writeCourseList();

int main() {
    int choice;

    writeCourseList();

    while (1) {
        printf("\n--- Course Management System ---\n");
        printf("1. Create Course\n");
        printf("2. Read Courses\n");
        printf("3. Update Course\n");
        printf("4. Delete Course\n");
        printf("5. Bubble Sort\n");
        printf("6. Selection Sort\n");
        printf("7. Linear Search\n");
        printf("8. Binary Search\n");
        printf("9. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1: createCourse(); break;
            case 2: readCourses(); break;
            case 3: updateCourse(); break;
            case 4: deleteCourse(); break;
            case 5: bubbleSort(); break;
            case 6: selectionSort(); break;
            case 7: {
                int id;
                printf("Enter course ID to search: ");
                scanf("%d", &id);
                int index = linearSearch(id);
                if (index != -1) {
                    printf("Course found: ID = %d, Description = %s\n", courses[index].id, courses[index].description);
                } else {
                    printf("Course not found.\n");
                }
                break;
            }
            case 8: {
                int id;
                printf("Enter course ID to search: ");
                scanf("%d", &id);
                int index = binarySearch(id);
                if (index != -1) {
                    printf("Course found: ID = %d, Description = %s\n", courses[index].id, courses[index].description);
                } else {
                    printf("Course not found.\n");
                }
                break;
            }
            case 9: exit(0);
            default: printf("Invalid choice. Please try again.\n");
        }
    }
    return 0;
}

void createCourse() {
    if (course_count >= MAX_COURSES) {
        printf("Cannot add more courses.\n");
        return;
    }
    printf("Enter course ID: ");
    scanf("%d", &courses[course_count].id);
    printf("Enter course name: ");
    scanf(" %[^\n]", courses[course_count].description); 
    course_count++;
    printf("Course added successfully.\n");
}

void readCourses() {
    if (course_count == 0) {
        printf("No courses to display.\n");
        return;
    }
    printf("List of courses:\n");
    for (int i = 0; i < course_count; i++) {
        printf("ID: %d, course name: %s\n", courses[i].id, courses[i].description);
    }
}

void updateCourse() {
    int id;
    printf("Enter course ID to update: ");
    scanf("%d", &id);
    int index = linearSearch(id);
    if (index != -1) {
        printf("Enter new name for course ID %d: ", id);
        scanf(" %[^\n]", courses[index].description);
        printf("Course updated successfully.\n");
    } else {
        printf("Course not found.\n");
    }
}

void deleteCourse() {
    int id;
    printf("Enter course ID to delete: ");
    scanf("%d", &id);
    int index = linearSearch(id);
    if (index != -1) {
        for (int i = index; i < course_count - 1; i++) {
            courses[i] = courses[i + 1];
        }
        course_count--;
        printf("Course deleted successfully.\n");
    } else {
        printf("Course not found.\n");
    }
}

void bubbleSort() {
    for (int i = 0; i < course_count - 1; i++) {
        for (int j = 0; j < course_count - i - 1; j++) {
            if (courses[j].id > courses[j + 1].id) {
                Course temp = courses[j];
                courses[j] = courses[j + 1];
                courses[j + 1] = temp;
            }
        }
    }
    printf("Courses sorted using Bubble Sort.\n");
}

void selectionSort() {
    for (int i = 0; i < course_count - 1; i++) {
        int min_index = i;
        for (int j = i + 1; j < course_count; j++) {
            if (courses[j].id < courses[min_index].id) {
                min_index = j;
            }
        }
        if (min_index != i) {
            Course temp = courses[i];
            courses[i] = courses[min_index];
            courses[min_index] = temp;
        }
    }
    printf("Courses sorted using Selection Sort.\n");
}

int linearSearch(int id) {
    for (int i = 0; i < course_count; i++) {
        if (courses[i].id == id) {
            return i;
        }
    }
    return -1;
}

int binarySearch(int id) {
    int left = 0, right = course_count - 1;
    while (left <= right) {
        int mid = left + (right - left) / 2;
        if (courses[mid].id == id) {
            return mid;
        }
        if (courses[mid].id < id) {
            left = mid + 1;
        } else {
            right = mid - 1;
        }
    }
    return -1;
}

void writeCourseList() {
    FILE *file = fopen(FILENAME, "w");
    if (file == NULL) {
        printf("\n");
        return;
    }
    for (int i = 0; i < course_count; i++) {
        fprintf(file, "%d,%s\n", courses[i].id, courses[i].description);
    }
    fclose(file);
    printf("Course list written to file.\n");
}
